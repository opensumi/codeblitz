[
  {
    "path": "src/filesystem/index.tsx",
    "oldCode": "import React, { useState, useMemo } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport {\n  AppRenderer,\n  BrowserFSFileType as FileType,\n  IAppRendererProps,\n} from '@codeblitzjs/ide-core';\nimport '@codeblitzjs/ide-core/languages';\nimport Select from 'antd/lib/select';\nimport 'antd/lib/select/style';\n\nconst dirMap: Record<string, [string, FileType][]> = {\n  '/': [\n    ['lib', FileType.DIRECTORY],\n    ['Readme.md', FileType.FILE],\n    ['LICENSE', FileType.FILE],\n    ['package.json', FileType.FILE],\n  ],\n  '/lib': [\n    ['application.js', FileType.FILE],\n    ['context.js', FileType.FILE],\n    ['request.js', FileType.FILE],\n    ['response.js', FileType.FILE],\n  ],\n};\n\nlet zipData: Buffer;\n\nconst zipDataPromise = (async () => {\n  const res = await fetch(\n    'http://alipay-rmsdeploy-image.cn-hangzhou.alipay.aliyun-inc.com/green-trail-test/dc85f34d-2467-436b-a0fe-092133ead0d6/demo.zip'\n  );\n  const buf = await res.arrayBuffer();\n  zipData = Buffer.from(new Uint8Array(buf));\n})();\n\nconst App = () => {\n  const [fsType, setFsType] = useState<string>('');\n\n  const filesystem = useMemo<\n    NonNullable<IAppRendererProps['runtimeConfig']['workspace']>['filesystem'] | undefined\n  >(() => {\n    switch (fsType) {\n      case 'IndexedDB':\n        return {\n          fs: 'IndexedDB',\n          options: {\n            storeName: 'my_db',\n          },\n        };\n      case 'InMemory':\n        return {\n          fs: 'InMemory',\n        };\n      case 'FileIndexSystem':\n        return {\n          fs: 'FileIndexSystem',\n          options: {\n            // 初始全量文件索引\n            requestFileIndex() {\n              return Promise.resolve({\n                'main.html': '<div id=\"root\"></div>',\n                'main.css': 'body {}',\n                'main.js': 'console.log(\"main\")',\n                'package.json': '{\\n  \"name\": \"Riddle\"\\n}',\n              });\n            },\n          },\n        };\n      case 'DynamicRequest':\n        return {\n          fs: 'DynamicRequest',\n          options: {\n            readDirectory(p: string) {\n              return dirMap[p];\n            },\n            async readFile(p) {\n              const res = await fetch(\n                `http://alipay-rmsdeploy-image.cn-hangzhou.alipay.aliyun-inc.com/green-trail-test/a87fb80d-3028-4b19-93a9-2da6f871f369/koa${p}`\n              );\n              return Buffer.from(await res.arrayBuffer());\n            },\n          },\n        };\n      case 'ZipFS':\n        return {\n          fs: 'ZipFS',\n          options: {\n            zipData,\n          },\n        };\n      case 'FolderAdapter':\n        return {\n          fs: 'FolderAdapter',\n          options: {\n            folder: '/demo',\n            wrapped: {\n              fs: 'ZipFS',\n              options: {\n                zipData,\n              },\n            },\n          },\n        };\n      case 'OverlayFS':\n        return {\n          fs: 'OverlayFS',\n          options: {\n            writable: { fs: 'InMemory' },\n            readable: {\n              fs: 'DynamicRequest',\n              options: {\n                readDirectory(p: string) {\n                  return dirMap[p];\n                },\n                async readFile(p) {\n                  const res = await fetch(\n                    `http://alipay-rmsdeploy-image.cn-hangzhou.alipay.aliyun-inc.com/green-trail-test/a87fb80d-3028-4b19-93a9-2da6f871f369/koa${p}`\n                  );\n                  return Buffer.from(await res.arrayBuffer());\n                },\n              },\n            },\n          },\n        };\n    }\n  }, [fsType]);\n\n  const workspace = filesystem\n    ? {\n        filesystem,\n        onDidChangeTextDocument(e) {\n          console.log('>>>onDidChangeTextDocument', e);\n        },\n        onDidSaveTextDocument(e) {\n          console.log('>>>onDidSaveTextDocument', e);\n        },\n        onDidCreateFiles(e) {\n          console.log('>>>onDidCreateFiles', e);\n        },\n        onDidChangeFiles(e) {\n          console.log('>>>onDidChangeFiles', e);\n        },\n        onDidDeleteFiles(e) {\n          console.log('>>>onDidDeleteFiles', e);\n        },\n      }\n    : undefined;\n\n  return (\n    <div style={{ height: '100%' }}>\n      <div style={{ height: 48, display: 'flex', alignItems: 'center' }}>\n        <Select value={fsType} onChange={(e) => setFsType(e as string)} style={{ width: 200 }}>\n          <Select.Option value=\"IndexedDB\">IndexedDB</Select.Option>\n          <Select.Option value=\"InMemory\">InMemory</Select.Option>\n          <Select.Option value=\"FileIndexSystem\">FileIndexSystem</Select.Option>\n          <Select.Option value=\"DynamicRequest\">DynamicRequest</Select.Option>\n          <Select.Option value=\"ZipFS\">ZipFS</Select.Option>\n          <Select.Option value=\"FolderAdapter\">FolderAdapter</Select.Option>\n          <Select.Option value=\"OverlayFS\">OverlayFS</Select.Option>\n        </Select>\n      </div>\n      <div style={{ height: 'calc(100% - 48px)' }}>\n        <AppRenderer\n          key={fsType}\n          appConfig={{\n            workspaceDir: 'filesystem',\n            defaultPreferences: {\n              'general.theme': 'opensumi-design-light',\n            },\n          }}\n          runtimeConfig={{\n            workspace,\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById('main') as HTMLElement);\n\nzipDataPromise.then(() => {\n  root.render(<App />);\n});\n",
    "newCode": "import React, { useState, useMemo } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport {\n  AppRenderer,\n  BrowserFSFileType as FileType,\n  IAppRendererProps,\n} from '@codeblitzjs/ide-core';\nimport '@codeblitzjs/ide-core/languages';\nimport Select from 'antd/lib/select';\nimport 'antd/lib/select/style';\n\nconst dirMap: Record<string, [string, FileType][]> = {\n  '/': [\n    ['lib', FileType.DIRECTORY],\n    ['Readme.md', FileType.FILE],\n    ['LICENSE', FileType.FILE],\n    ['package.json', FileType.FILE],\n  ],\n  '/lib': [\n    ['application.js', FileType.FILE],\n    ['context.js', FileType.FILE],\n    ['request.js', FileType.FILE],\n    ['response.js', FileType.FILE],\n  ],\n};\n\nlet zipData: Buffer;\n\nconst zipDataPromise = (async () => {\n  const res = await fetch(\n    'http://alipay-rmsdeploy-image.cn-hangzhou.alipay.aliyun-inc.com/green-trail-test/dc85f34d-2467-436b-a0fe-092133ead0d6/demo.zip'\n  );\n  const buf = await res.arrayBuffer();\n  zipData = Buffer.from(new Uint8Array(buf));\n})();\n\nconst App = () => {\n  const [fsType, setFsType] = useState<string>('');\n\n  const filesystem = useMemo<\n    NonNullable<IAppRendererProps['runtimeConfig']['workspace']>['filesystem'] | undefined\n  >(() => {\n    switch (fsType) {\n      case 'IndexedDB':\n        return {\n          fs: 'IndexedDB',\n          options: {\n            storeName: 'my_db',\n          },\n        };\n      case 'InMemory':\n        return {\n          fs: 'InMemory',\n        };\n      case 'FileIndexSystem':\n        return {\n          fs: 'FileIndexSystem',\n          options: {\n            // 初始全量文件索引\n            requestFileIndex() {\n              return Promise.resolve({\n                'main.html': '<div id=\"root\"></div>',\n                'main.css': 'body {}',\n                'main.js': 'console.log(\"main\")',\n                'package.json': '{\\n  \"name\": \"Riddle\"\\n}',\n              });\n            },\n          },\n        };\n      case 'DynamicRequest':\n        return {\n          fs: 'DynamicRequest',\n          options: {\n            readDirectory(p: string) {\n              return dirMap[p];\n            },\n            async readFile(p) {\n              const res = await fetch(\n                `http://alipay-rmsdeploy-image.cn-hangzhou.alipay.aliyun-inc.com/green-trail-test/a87fb80d-3028-4b19-93a9-2da6f871f369/koa${p}`\n              );\n              return Buffer.from(await res.arrayBuffer());\n            },\n          },\n        };\n      case 'ZipFS':\n        return {\n          fs: 'ZipFS',\n          options: {\n            zipData,\n          },\n        };\n      case 'FolderAdapter':\n        return {\n          fs: '     case 'OverlayFS':\n        return {\n          fs: 'OverlayFS',\n          options: {\n            writable: { fs: 'InMemory' },\n            readable: {\n              fs: 'DynamicRequest',\n              options: {\n                readDirectory(p: string) {\n                  return dirMap[p];\n                },\n                async readFile(p) {\n                  const res = await fetch(\n                    `http://alipay-rmsdeploy-image.cn-hangzhou.alipay.aliyun-inc.com/green-trail-test/a87fb80d-3028-4b19-93a9-2da6f871f369/koa${p}`\n                  );\n                  return Buffer.from(await res.arrayBuffer());\n                },\n              },\n            },\n          },\n        };\n    }\n  }, [fsType]);\n\n  const workspace = filesystem\n    ? {\n        filesystem,\n        onDidChangeTextDocument(e) {\n          console.log('>>>onDidChangeTextDocument', e);\n        },\n        onDidSaveTextDocument(e) {\n          console.log('>>>onDidSaveTextDocument', e);\n        },\n        onDidCreateFiles(e) {\n          console.log('>>>onDidCreateFiles', e);\n        },\n        onDidChangeFiles(e) {\n          console.log('>>>onDidChangeFiles', e);\n        },\n        onDidDeleteFiles(e) {\n          console.log('>>>onDidDeleteFiles', e);\n        },\n      }\n    : undefined;\n\n  return (\n    <div style={{ height: '100%' }}>\n      <div style={{ height: 48, display: 'flex', alignItems: 'center' }}>\n        <Select value={fsType} onChange={(e) => setFsType(e as string)} style={{ width: 200 }}>\n          <Select.Option value=\"IndexedDB\">IndexedDB</Select.Option>\n          <Select.Option value=\"InMemory\">InMemory</Select.Option>\n          <Select.Option value=\"FileIndexSystem\">FileIndexSystem</Select.Option>\n          <Select.Option value=\"DynamicRequest\">DynamicRequest</Select.Option>\n          <Select.Option value=\"ZipFS\">ZipFS</Select.Option>\n          <Select.Option value=\"FolderAdapter\">FolderAdapter</Select.Option>\n          <Select.Option value=\"OverlayFS\">OverlayFS</Select.Option>\n        </Select>\n      </div>\n      <div style={{ height: 'calc(100% - 48px)' }}>\n        <AppRenderer\n          key={fsType}\n          appConfig={{\n            workspaceDir: 'filesystem',\n            defaultPreferences: {\n              'general.theme': 'opensumi-design-light',\n            },\n          }}\n          runtimeConfig={{\n            workspace,\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst root = createRoot(document.getElementById('main') as HTMLElement);\n\nzipDataPromise.then(() => {\n  root.render(<App />);\n});\n"
  }
]
